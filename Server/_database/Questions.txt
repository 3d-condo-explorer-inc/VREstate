
1. Options.
 
Я правильно понимаю, что:
 
- options создаются администратором
[NAV]: По задумке, Options создаются Subcontractor-ом, если таковой User присутствует. Subcontractor устанавливает цены на материалы и работу, объявляет CutOffDay и т.п. 
Конечно же DeveloperAdmin может делать все то же, что и Subcontractor (более того, DeveloperAdmin - это как раз тот, кто может по своему усмотрению либо создавать Subcontractor-а/ов и таким образом делегировать ему/им работу с Options, либо выполнять ее самому, не мучаясь с Subcontractor-ами).
- options связаны с квартирами many-to-many и это и есть список того, что можно сделать с квартирой
[NAV]: Верно
- options к каждой квартире добавляет администратор
[NAV]: Options добавляются Subcontractor-ами, если таковые присутствуют в системе. В противном случае это делает DeveloperAdmin
- account создаётся для каждой пары квартира-покупатель
[NAV]: Чисто из общечеловеческой вредности скажу, что это верно, но не совсем ;o)
В объектной модели нет отдельной роли Посетителя (Посетитель - это Buyer без  Account-а в контексте данного VrEstateDeveloper-а), поэтому, если говорить точно, то "Account создается для тех Buyer-ов, которые решили купить какой-нибудь Suite". Buyer может иметь более чем один Account у одного и того же VrEstateDeveloper-а, как в одном и том же, так и в разных Building-ах.
- transaction - это фактически many-to-many связь между account и options; то есть список того, что выбрал покупатель
[NAV]: Мне думалось, что Transaction - это one-to-one связь между Account-ом и Option. Но ты сейчас заставил меня подзадуматься, и я бы теперь сформулировал Transaction как one-to-many связь между Account-ом и набором Option-s (в том смысле, что если Buyer в один день выбрал сразу 10 upgrades для своей квартиры, то он может оплатить их всех одним махом, в пределах одной Transaction).
- как определить взаимоисключающие options и не дать покупателю выбрать 
"красный холодильник" И "синий холодильник" одновременно?
[NAV]: Option имеет параметр Material, то что ты называешь "синий" и "красный" - это и есть Material-s для Option "холодильник". Невозможно выбрать один холодильник с двумя материалами. С этим-то как раз все просто, но вообще с Options/Materials есть еще вопросы в дизайне, до которых у меня руки пока не доходили. Надо будет с тобой это как-нибудь обсудить.
- я правильно понимаю, что для options нужен ещё один объект:
        - Option option;
        - Building building;
        - SortedList<Price> prices;
        - DateTime cutOffDate;
(два последних поля переносятся из объекта Option)
Отдельный объект нужен чтобы связать option с ценой и cut-off-date в 
терминах отдельного дома.
[NAV]: Я не очень понял, зачем заводить еще один объект? Просто список всех-всех-всех Option-s должен храниться в Building, а Suite, как полагается, хранит в себе лишь выбранное подмножество доступных опций. Я не отразил это в диаграмме с самого начала - извиняюсь, моя промашка ;o)
 
2. Изоляция EstateDeveloper.
 
[NAV]: Как я себе это фантазировал, в Login-протоколе для всех User-ов (кроме SuperAdmin-а) должен присутствовать параметр "VrEstateDeveloperID". Клиентская часть либо имеет значение этого параметра hard-coded (для конфигурации Kiosk), либо получает его в результате некоего query, скажем, в результате предшедствующего search (для конфигурации Online).
 
Идентификатор EstateDeveloper прописывается в конфигурации клиентской 
программы, используя который клиентская программа подключается к системе.
 
Тогда:
- логины привязываются к правильному EstateDeveloper; для подрядчиков и продавцов может быть список EstateDeveloper,
  у которых они зарегистрированы.
- при логине покупатель видит дома только нужного EstateDeveloper;
- посетитель также заранее видит только нужные дома;
- в случае самой полной лицензии ID=0 и покупатель видит все дома сразу.
[NAV]: Андрей, невозможно видеть все дома сразу - они ведь географически в разных местах города, или даже в разных городах/странах. Я думаю, в самой полной лицензии мы будем показывать карту, на которой будут обозначены иконками Building-и (одного или разных VrEstateDeveloper-ов). Покупатель будет тыкать мышкой (или пальцем) на какой-нибудь из этих Building-ов, при этом на сервер полетит query и клиент получит VrEstateDeveloperID для этого Building-а...
Короче говоря, мне кажется, можно вполне обойтись без концепции "Anonymous VrEstateDeveloper" (ID=0)
 
- в случае если покупатель заходит с использованием другого ID, он автоматически приписывается к новому EstateDeveloper; это
  же НЕ происходит с продавцами и подрядчиками, для которых такой сценарий невозможен.
Тут возникает пикантный момент.  Если в системе есть подрядчик, работающий у одного EstateDeveloper, то при перерегистрации у другого EstateDeveloper этот другой должен выбрать его из списка, а не вводить заново.  То есть он видит, что данный
подрядчик с кем-то уже работает (но не видит с кем).  То же относится и к продавцам и к покупателям.
[NAV]: Мне думается, что каждый VrEstateDeveloper должен заводить для себя всех своих User-ов совершенно независимо. Это, конечно же, приведет к возникновению скрытых дубликатов. Нам просто надо продумать такую maintenance procedure, которая бы выявляла для SuperAdmin-а все эти дубликаты (по одинаковым полям в ContactInfo, например). В обязанности SuperAdmin-а должно входить плановое (скажем, раз в неделю) слияние дубликатов. Мне кажется, это было бы наиболее простым решением вопроса.
Если тебе это нравится, то тогда надо будет изменить содержание объекта User - чтобы один и тот же User мог иметь несколько Credentials. И класс Credentials должен, кроме UserName/Password иметь еще поле VrEstateDeveloperID (потому что теперь Credentials всегда per VrEstateDeveloper).
Вариант сокрытия:
- создание нового логина не должно отличаться от начала использования существующего.
- при создании логина или привязки логина к новому EstateDeveloper, последний НЕ имеет доступа к контактной информации
  добавленного в течение какого-то времени (суток?) после привязки к новому EstateDeveloper; добавить/изменить
  контактную информацию может только владелец.
 
 
3. Нужны какие-то средства борьбы с киберсквоттингом.  Тут это немного проще.
Чисто он-лайн транзакции должны быть неполными.
Например, если покупатель выбрал квартиру, она резервируется за ним на какой-то короткий срок (неделю?),
в течение которого он должен лично (или хотя бы по телефону) пообщаться с продавцом, который может поставить
квартиру в резерв на неопределённый срок.  В противном случае по истечении срока резерва кватрира опять становится
свободной.
[NAV]: Тут всё проще: Buyer не может самостоятельно зарезервировать за собой квартиру - только в присутствии Salesperson. Соответственно, и Salesperson не может самостоятельно зарезервировать за кем-то квартиру - только в присутствии Buyer-а. Таким образом, "покупка" (т.е. перевот Suite из статуса "Available" в статус "OnHold") может происходить только во время совместной сессии Buyer-а и Salesperson-а (VRTour). Надо заметить, что для того, чтобы перевести Suite из статуса "OnHold" в статус "Sold" (или обратно в "Available") присутствие Buyer не обязательно.
 